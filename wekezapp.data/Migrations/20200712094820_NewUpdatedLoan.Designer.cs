// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wekezapp.data.Persistence;

namespace wekezapp.data.Migrations
{
    [DbContext(typeof(WekezappContext))]
    [Migration("20200712094820_NewUpdatedLoan")]
    partial class NewUpdatedLoan
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("wekezapp.data.Entities.Chama", b =>
                {
                    b.Property<int>("ChamaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Balance");

                    b.Property<string>("ChamaName")
                        .IsRequired();

                    b.Property<float>("LatePaymentFineRate");

                    b.Property<float>("LoanInterestRate");

                    b.Property<float>("MgrAmount");

                    b.Property<string>("MgrOrder");

                    b.Property<float>("MinimumContribution");

                    b.Property<DateTime>("NextMgrDate");

                    b.Property<int>("NextMgrReceiverIndex");

                    b.Property<int>("Period");

                    b.HasKey("ChamaId");

                    b.ToTable("Chamas");
                });

            modelBuilder.Entity("wekezapp.data.Entities.FlowItem", b =>
                {
                    b.Property<int>("FlowItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<string>("CanBeSeenBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("HasBeenSeenBy");

                    b.Property<bool>("IsConfirmable");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsForAll");

                    b.Property<int>("NotificationType");

                    b.Property<int>("TransactionId");

                    b.HasKey("FlowItemId");

                    b.ToTable("FlowItems");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount");

                    b.Property<int>("ConfirmedBy");

                    b.Property<int>("CreditFrom");

                    b.Property<int>("DebitTo");

                    b.Property<int>("DocumentType");

                    b.Property<bool>("IsReversal");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactionId");

                    b.HasKey("DocumentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount");

                    b.Property<DateTime>("DateClosed");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsClosed");

                    b.HasKey("TransactionId");

                    b.ToTable("Transaction");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("wekezapp.data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("SecondName");

                    b.Property<double>("Stake");

                    b.Property<string>("Token");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.ChamaDeposit", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnName("DateRequested");

                    b.Property<int>("DepositorId")
                        .HasColumnName("DepositorId");

                    b.HasDiscriminator().HasValue("ChamaDeposit");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.ChamaWithdrawal", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnName("DateRequested");

                    b.Property<int>("WithdrawerId")
                        .HasColumnName("WithdrawerId");

                    b.HasDiscriminator().HasValue("ChamaWithdrawal");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.Contribution", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<float>("AmountPaidSoFar")
                        .HasColumnName("AmountPaidSoFar");

                    b.Property<int>("ContributorId");

                    b.Property<DateTime>("DateDue")
                        .HasColumnName("DateDue");

                    b.Property<DateTime>("DateFirstRequested")
                        .HasColumnName("DateRequested");

                    b.HasDiscriminator().HasValue("Contribution");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.ContributionFine", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<int>("ContributionId");

                    b.Property<DateTime>("DateApplied");

                    b.Property<float>("Rate");

                    b.HasDiscriminator().HasValue("ContributionFine");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.Loan", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<float>("AmountPaidSoFar")
                        .HasColumnName("AmountPaidSoFar");

                    b.Property<float>("AmountPayable");

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("DateDue")
                        .HasColumnName("DateDue");

                    b.Property<DateTime>("DateIssued");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnName("DateRequested");

                    b.Property<int>("EvaluatedBy");

                    b.Property<float>("InterestRate");

                    b.Property<bool>("IsDefaulted");

                    b.Property<float>("LatePaymentFine");

                    b.Property<int>("ReceiverId")
                        .HasColumnName("ReceiverId");

                    b.HasDiscriminator().HasValue("Loan");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.MerryGoRound", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<DateTime>("DateDue")
                        .HasColumnName("DateDue");

                    b.Property<int>("ReceiverId")
                        .HasColumnName("ReceiverId");

                    b.HasDiscriminator().HasValue("MerryGoRound");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.PayOut", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<int>("ReceiverId")
                        .HasColumnName("ReceiverId");

                    b.HasDiscriminator().HasValue("PayOut");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.PersonalDeposit", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnName("DateRequested");

                    b.Property<int>("DepositorId")
                        .HasColumnName("DepositorId");

                    b.HasDiscriminator().HasValue("PersonalDeposit");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.PersonalWithdrawal", b =>
                {
                    b.HasBaseType("wekezapp.data.Entities.Transactions.Transaction");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnName("DateRequested");

                    b.Property<int>("WithdrawerId")
                        .HasColumnName("WithdrawerId");

                    b.HasDiscriminator().HasValue("PersonalWithdrawal");
                });

            modelBuilder.Entity("wekezapp.data.Entities.Transactions.Document", b =>
                {
                    b.HasOne("wekezapp.data.Entities.Transactions.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
